services:
  db:
    image: postgres:16
    container_name: pft_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-finance}
      POSTGRES_USER: ${POSTGRES_USER:-finance}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-finance}
    volumes:
    - db_data:/var/lib/postgresql/data
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U ${POSTGRES_USER:-finance}
      interval: 2s
      timeout: 2s
      retries: 3
      start_period: 5s
    networks:
    - pftnet
  redis:
    image: redis:7-alpine
    container_name: pft_redis
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 2s
      timeout: 2s
      retries: 3
      start_period: 3s
    networks:
    - pftnet
  backend:
    build:
      context: ./backend
    container_name: pft_backend
    env_file:
    - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
    - 8000:8000
    command:
    - gunicorn
    - config.wsgi:application
    - --bind
    - 0.0.0.0:8000
    - --workers
    - '3'
    networks:
    - pftnet
  worker:
    build:
      context: ./backend
    container_name: pft_worker
    env_file:
    - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command:
    - celery
    - -A
    - config
    - worker
    - -l
    - info
    networks:
    - pftnet
  beat:
    build:
      context: ./backend
    container_name: pft_beat
    env_file:
    - .env
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_healthy
    command:
    - celery
    - -A
    - config
    - beat
    - -l
    - info
    - --scheduler
    - django_celery_beat.schedulers:DatabaseScheduler
    networks:
    - pftnet
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pft_frontend
    depends_on:
      backend:
        condition: service_started
    ports:
    - 9080:80
    networks:
    - pftnet
  frontend-build:
    image: node:20-alpine
    working_dir: /app
    volumes:
    - ./frontend:/app
    command:
    - sh
    - -c
    - npm ci && npm run build
    networks:
    - pftnet
volumes:
  db_data: {}
  static_volume: {}
  media_volume: {}
networks:
  pftnet:
    driver: bridge
