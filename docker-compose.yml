services:
  db:
    image: postgres:16
    container_name: pft_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pft_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-pft_db}"]
      interval: 5s
      timeout: 5s
      retries: 30
    networks: [pftnet]

  redis:
    image: redis:7
    container_name: pft_redis
    networks: [pftnet]

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pft_backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      POSTGRES_HOST: db
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8000:8000"
    networks: [pftnet]

  worker:
    build:
      context: ./backend
    container_name: pft_worker
    depends_on:
      - backend
      - redis
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    command: ["celery", "-A", "config", "worker", "-l", "info"]
    networks: [pftnet]

  beat:
    build:
      context: ./backend
    container_name: pft_beat
    depends_on:
      - backend
      - redis
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    command: ["celery", "-A", "config", "beat", "-l", "info"]
    networks: [pftnet]

volumes:
  db_data:
  static_volume:
  media_volume:

networks:
  pftnet:
    driver: bridge
