
version: "3.9"

services:
  db:
    image: postgres:16
    container_name: pft_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pft_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-pft_db}"]
      interval: 5s
      timeout: 5s
      retries: 30
    networks: [pftnet]

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pft_backend
    depends_on:
      db:
        condition: service_healthy
    environment:
      DJANGO_SETTINGS_MODULE: backend.config.settings
      SECRET_KEY: ${SECRET_KEY:-changeme-in-prod}
      DEBUG: ${DEBUG:-False}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-*}
      POSTGRES_DB: ${POSTGRES_DB:-pft_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME:-}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD:-}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL:-}
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    expose:
      - "8000"
    networks: [pftnet]

  frontend-build:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_dist:/dist
    command: sh -c "([ -f package-lock.json ] && npm ci || npm i) && npm run build && rm -rf /dist/* && cp -r dist/* /dist/"
    # Run ad-hoc: docker compose run --rm frontend-build
    networks: [pftnet]

  nginx:
    image: nginx:alpine
    container_name: pft_nginx
    depends_on:
      - backend
    ports:
      - "${PFT_HTTP_PORT:-8082}:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - frontend_dist:/usr/share/nginx/html:ro
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
    networks: [pftnet]

  redis:
    image: redis:7-alpine
    container_name: pft_redis
    ports:
      - "6379:6379"
    networks: [pftnet]

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pft_worker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      DJANGO_SETTINGS_MODULE: backend.config.settings
      SECRET_KEY: ${SECRET_KEY:-changeme-in-prod}
      DEBUG: ${DEBUG:-False}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-*}
      POSTGRES_DB: ${POSTGRES_DB:-pft_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    command: ["celery", "-A", "config", "worker", "-l", "info"]
    networks: [pftnet]

  beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pft_beat
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      DJANGO_SETTINGS_MODULE: backend.config.settings
      SECRET_KEY: ${SECRET_KEY:-changeme-in-prod}
      DEBUG: ${DEBUG:-False}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-*}
      POSTGRES_DB: ${POSTGRES_DB:-pft_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    command: ["celery", "-A", "config", "beat", "-l", "info"]
    networks: [pftnet]

volumes:
  db_data:
  static_volume:
  media_volume:
  frontend_dist:
  frontend_node_modules:

networks:
  pftnet:
    driver: bridge